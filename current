srcs/autocomplete.c:	all->maxlen_arg = find_maxlen_elem(lst);
srcs/autocomplete.c:	// printf("largeur: %d\n", all->ws.ws_col);
srcs/autocomplete.c:	// printf("maxlen: %d\n", all->maxlen_arg);
srcs/autocomplete.c:	while (all->ws.ws_col > (all->maxlen_arg + 9))
srcs/autocomplete.c:		all->ws.ws_col -= (all->maxlen_arg + 9);
srcs/autocomplete.c:	all->files_by_row = define_nb_files_by_row(all, lst);
srcs/autocomplete.c:		if (ct == all->files_by_row - 1)
srcs/autocomplete.c:		while (len++ < (all->maxlen_arg + 11))
srcs/autocomplete.c:	all->nb_char_write = (all->maxlen_arg + 11) * (int)lst->lenght;
srcs/autocomplete.c:	all->list_dir = create_clst();
srcs/autocomplete.c:			clst_add_elem_back(all->list_dir, clst_create_elem(dirp->d_name));
srcs/autocomplete.c:	//sort_name(&all->list_dir->head);
srcs/autocomplete.c:	t_select	*nav = all->list_dir->head;
srcs/autocomplete.c:	if (all->ct_select == (int)all->list_dir->lenght)
srcs/autocomplete.c:		all->list_dir->tail->onArg = 0;
srcs/autocomplete.c:		all->ct_select = 0;
srcs/autocomplete.c:	while (++i < all->ct_select)
srcs/autocomplete.c:	all->ct_select++;
srcs/autocomplete.c:	//printf("nbcharwrite: %d\n", all->nb_char_write);
srcs/autocomplete.c:	if (all->nb_char_write > 0)
srcs/autocomplete.c:		while (all->nb_char_write--)
srcs/autocomplete.c:	all->nb_char_write = ft_strlen(nav->arg);
srcs/autocomplete.c:	all->stop = 0;
srcs/autocomplete.c:	if (!all->already_open)
srcs/autocomplete.c:		dir = find_path(all->cmd);
srcs/autocomplete.c:		all->nav_dir = all->list_dir->head;
srcs/autocomplete.c:		//display_elems(all, all->list_dir);
srcs/autocomplete.c:		all->already_open = 1;
srcs/autocomplete.c:		display_current(all, all->nav_dir);
srcs/autocomplete.c:		all->nav_dir = (all->nav_dir->next) ? all->nav_dir->next : all->list_dir->head;
srcs/autocomplete.c:		//if (all->cmd_termcaps->tail->c == '/')
srcs/autocomplete.c:		//	add_to_cmd(all, ft_strjoin(all->nav_dir->prev->arg, "/"));
srcs/autocomplete.c:		//	all->already_open = 0;
srcs/autocomplete.c:		//display_elems(all, all->list_dir);
srcs/binary_tools.c:	while (all->path2exec[ct])
srcs/binary_tools.c:		bin_tmp = create_path(all->path2exec[ct], argv_bin[0]);
srcs/binary_tools.c:			exec_binary(bin_tmp, argv_bin, all->dupenv);
srcs/builtins.c:	all->oldpwd = getcwd(buff, 42);
srcs/builtins.c:	all->oldpwd = ft_strjoin(all->oldpwd, "/");
srcs/builtins.c:	// while (all->env->lenght-- != 0)
srcs/builtins.c:	// 	dlst_del_one(all->env, all->env->head->s);
srcs/builtins.c:	// if (all->path2exec != NULL)
srcs/builtins.c:	// 	del_array(&all->path2exec);
srcs/builtins.c:	// if (all->dupenv != NULL)
srcs/builtins.c:	// 	del_array(&all->dupenv);
srcs/builtins.c:	// if (all->cmd != NULL)
srcs/builtins.c:	// 	ft_strdel(&all->cmd);
srcs/builtins.c:	// if (all->redirect_cmd)
srcs/builtins.c:	// 	ft_strdel(&all->redirect_cmd);
srcs/builtins.c:	close(all->fd_history);
srcs/cmd_exec.c:	if (all->parsecmd != NULL)
srcs/cmd_exec.c:		while (all->parsecmd[i])
srcs/cmd_exec.c:			if (check_redirection(all->parsecmd[i]) == 1)
srcs/cmd_exec.c:				exec_redirection_cmd(all, all->parsecmd[i]);
srcs/cmd_exec.c:				exec_simple_cmd(all, all->parsecmd[i]);
srcs/cmd_parse.c:	all->parsecmd = NULL;
srcs/cmd_parse.c:		all->parsecmd = ft_strsplit(buff, ';');
srcs/cmd_parse.c:	if (all->parsecmd != NULL)
srcs/cmd_parse.c:		while (all->parsecmd[++i])
srcs/cmd_parse.c:			all->parsecmd[i] = ft_epur_str(all->parsecmd[i]);
srcs/env.c:	nav = all->env->head_node;
srcs/env.c:	dlst_add_back((t_dlist *)all->env, (t_node *)dlst_node_new(cmd + 8,
srcs/env.c:		all->env->lenght));
srcs/env.c:	dlst_del_one(all->env, (cmd + 10));
srcs/history.c:	int	i = all->cmd_termcaps->lenght;
srcs/history.c:	if (i == 0 && all->current != NULL)
srcs/history.c:		i = ft_strlen(all->current);
srcs/history.c:	if (!(history_line = (char *)malloc(sizeof(char) * (int)all->cmd_termcaps->lenght + 1)))
srcs/history.c:	tmp = ft_itoa(all->pos_history++);
srcs/history.c:	while (all->cmd[i])
srcs/history.c:		history_line[ct++] = all->cmd[i++];
srcs/history.c:	write(all->fd_history, history_line, ft_strlen(history_line));
srcs/history.c:	write(all->fd_history, "\n", 1);
srcs/history.c:	if (all->history_buff != NULL)
srcs/history.c:		del_array(&all->history_buff);
srcs/history.c:		all->history_buff = parse_history();
srcs/history.c:	while (all->history_buff[all->index_history - 1][ct] != ':')
srcs/history.c:	while (all->history_buff[all->index_history - 1][ct])
srcs/history.c:		tmp[i++] = all->history_buff[all->index_history - 1][ct++];
srcs/history.c:	all->cursor_pos = i;
srcs/history.c://	printf("%s\n", all->history_buff[all->index_history - 1]);
srcs/history.c:	//printf("cursor pos: %d\n", all->cursor_pos);
srcs/history.c:	if (all->cursor_pos == 1)
srcs/history.c:	//printf("%d\n", all->index_history);
srcs/history.c:	if (K_UP && all->index_history > 1)
srcs/history.c:	//	printf("%d\n", all->index_history);
srcs/history.c:		if (all->cursor_pos > 1)
srcs/history.c:			all->cursor_pos = 1;
srcs/history.c:		all->index_history--;
srcs/history.c:	if (K_DOWN && all->index_history <= all->pos_history - 1)
srcs/history.c:		all->index_history++;
srcs/history.c:		if (all->cursor_pos > 1 || all->index_history == all->pos_history)
srcs/history.c:			all->cursor_pos = 1;
srcs/history.c:		//printf("index: %d\n", all->index_history);
srcs/history.c:		//printf("pos: %d\n", all->pos_history);
srcs/history.c:		if (all->index_history == all->pos_history)
srcs/history.c:	// if (K_UP && all->cmd_history->lenght > 0 && all->nav != NULL)
srcs/history.c:	// 	all->cmd = all->nav->s;
srcs/history.c:	// 	if (all->nav->prev != NULL)
srcs/history.c:	// 		all->nav = all->nav->prev;
srcs/history.c:	// 	all->current = ft_strdup(all->cmd);
srcs/history.c:	// 	all->already_in_history = 1;
srcs/history.c:	// 	ft_putstr(all->cmd);
srcs/history.c:	// if (K_DOWN && all->cmd_history->lenght > 0 && all->nav != NULL)
srcs/history.c:	// 	if (all->nav->next != NULL)
srcs/history.c:	// 		all->nav = all->nav->next;
srcs/history.c:	// 	all->cmd = all->nav->s;
srcs/history.c:	// 	all->current = ft_strdup(all->cmd);
srcs/history.c:	// 	all->already_in_history = 1;
srcs/history.c:	// 	ft_putstr(all->cmd);
srcs/init.c:	if (ioctl(init_tty(), TIOCGWINSZ, &all->ws) == -1)
srcs/init.c:	//init_termios(all->term);
srcs/init.c:	all->env = init_env(env);
srcs/init.c:	all->dupenv = ft_dupenv(env);
srcs/init.c:	all->cmd_history = create_dlst();
srcs/init.c:	// all->cmd = create_cmd_dlst();
srcs/init.c:	all->path2exec = ft_strsplit(find_env_arg(all, "PATH") + 5, ':');
srcs/init.c:	all->parsecmd = NULL;
srcs/init.c:	all->pipe = NULL;
srcs/init.c:	all->nav = NULL;
srcs/init.c:	all->current = NULL;
srcs/init.c:	// if ((all->fd2open = open(redirect[1], O_WRONLY | O_CREAT | O_APPEND, 0644)) == -1)
srcs/init.c:	if ((all->fd_history = open(".21sh_history", O_WRONLY | O_CREAT | O_APPEND, 0644)) == -1)
srcs/init.c:	all->history_buff = parse_history();
srcs/init.c:	all->pos_history = check_history_file(all->history_buff);
srcs/init.c:	// all->file_history = ft_strdup(".21sh_history");
srcs/main.c:	nav = all->cmd_termcaps->head;
srcs/main.c:	if (all->cmd)
srcs/main.c:		ft_strdel(&all->cmd);
srcs/main.c:	if (!(all->cmd = (char *)malloc(sizeof(char) * len_lst_cmd(all->cmd_termcaps->head) + 1)))
srcs/main.c:			all->cmd[i++] = nav->c;
srcs/main.c:		all->cmd[i] = '\0';
srcs/main.c:	nav = all->list_dir->head;
srcs/main.c:	if (all->cmd_termcaps)
srcs/main.c:		del_dlist2(all->cmd_termcaps);
srcs/main.c:		all->cmd_termcaps = create_cmd_dlst();
srcs/main.c:		dlst_add_back_2(all->cmd_termcaps, dlst_cmd_new(cmd2realloc[ct++]));
srcs/main.c:	all->cursor_pos = (int)all->cmd_termcaps->lenght + 1;
srcs/main.c:	// display_dlst(all->cmd_termcaps);
srcs/main.c:	// printf("pos: %d", all->cursor_pos);
srcs/main.c:	//all->already_in_history = 0;
srcs/main.c:	// if (all->cmd_termcaps == NULL)
srcs/main.c:// 	all->cmd_termcaps = dlst_insert_cmd(all->cmd_termcaps,
srcs/main.c:// 		dlst_cmd_new(char2add, 1), all->cursor_pos);
srcs/main.c:// 	all->stop = 0;
srcs/main.c:	// printf("pos: %d\n", all->cursor_pos);
srcs/main.c:	//printf("size: %zu\n", all->cmd_termcaps->lenght);
srcs/main.c:	//display_dlst(all->cmd_termcaps);
srcs/main.c:	// display_cursor(all->cmd_termcaps, all->cursor_pos);
srcs/main.c:	//printf("pos: %d\n", all->cursor_pos);
srcs/main.c:	all->cmd_termcaps = dlst_insert_cmd(all->cmd_termcaps,
srcs/main.c:		dlst_cmd_new(char2add), all->cursor_pos);
srcs/main.c:	all->cursor_pos++;
srcs/main.c:	//display_cursor(all->cmd_termcaps, all->cursor_pos);
srcs/main.c:	//display_dlst2(all->cmd_termcaps);
srcs/main.c:	// ct = (size_t)all->cursor_pos;
srcs/main.c:	// // while (ct++ < all->cmd_termcaps->lenght)
srcs/main.c:	// ft_putstr(all->cmd);
srcs/main.c:	// // ct = (size_t)all->cmd_termcaps->lenght;
srcs/main.c:	// // while (ct-- > (size_t)all->cursor_pos)
srcs/main.c:	// // all->cursor_pos++;
srcs/main.c:	// all->stop = 0;
srcs/main.c:	//printf("cursor: %d\n", all->cursor_pos);
srcs/main.c:	// while (++ct < (size_t)all->cursor_pos)
srcs/main.c:	// while (++ct < (size_t)all->cursor_pos)
srcs/main.c:	// while (all->cmd[ct++])
srcs/main.c:	// 	write(1, &all->cmdm[ct], 1);
srcs/main.c:	all->stop = 0;
srcs/main.c:	all->already_open = 0;
srcs/main.c:	all->already_in_history = 0;
srcs/main.c:	all->cursor_pos = 1;
srcs/main.c:	all->index_history = all->pos_history;
srcs/main.c:	all->cmd_termcaps = create_cmd_dlst();
srcs/main.c:	if (!(all->cmd = (char *)malloc(sizeof(char) * MAXLEN - 1)))
srcs/main.c:	all->nav = all->cmd_history->tail_node;
srcs/main.c:			// if (all->already_open)
srcs/main.c:			// 	add_to_cmd(all, all->nav_dir->prev->arg);
srcs/main.c:				//printf("curr dir: %s\n", all->nav_dir->prev->arg);
srcs/main.c:			//all->stop = 1;
srcs/main.c:			all->stop = 0;
srcs/main.c:			// 	if (all->nav_dir)
srcs/main.c:			// 		add_to_cmd(all, (all->nav_dir->prev) ? all->nav_dir->prev->arg : all->nav_dir->arg);
srcs/main.c:			// 	all->already_open = 0;
srcs/main.c:			// if (all->already_in_history)
srcs/main.c:			// 	realloc_termcaps_cmd(all, all->cmd);
srcs/main.c:			// 	ft_strdel(&all->current);
srcs/main.c:			// 	all->is_history = 1;
srcs/main.c:			// 	all->stop = 0;
srcs/main.c:			//printf("pos cursor: %d\n", all->cursor_pos);
srcs/main.c:			if ((size_t)all->cursor_pos <= all->cmd_termcaps->lenght && *buff != '\n')
srcs/main.c:				all->cursor_pos++;
srcs/main.c:				dlst_add_back_2(all->cmd_termcaps, dlst_cmd_new(*buff));
srcs/main.c:			// all->cursor_pos++;
srcs/main.c:	//printf("last: %c\n", all->cmd_termcaps->tail->c);
srcs/main.c:	(!all->stop) ? create_cmd(all) : ft_strdel(&all->current);
srcs/main.c:	(!all->stop && !all->is_history) ? write(1, "\n", 1) : write(1, "\0", 1);
srcs/main.c:	(all->cmd[ft_strlen(all->cmd) - 1] == '\n') ? all->cmd[ft_strlen(all->cmd) - 1] = '\0'
srcs/main.c:	printf("cmd: |%s|\n", all->cmd);
srcs/main.c:	// printf("lenght list[main]: %zu\n", all->cmd_termcaps->lenght);
srcs/main.c:	if (all->cmd[0] != 0 && ft_strlen(all->cmd) > 0)
srcs/main.c:		//dlst_add_back(all->cmd_history, dlst_node_new(all->cmd, all->cmd_history->lenght + 1));
srcs/main.c:		parse_command(all, all->cmd);
srcs/main.c:	// del_dlist2(all->cmd_termcaps);
srcs/main.c:	del_dlist(all->env);
srcs/main.c:	del_dlist(all->cmd_history);
srcs/main.c:	restore_term(all->restore);
srcs/moves.c:		//printf("-> %d\n", all_is_spaces(all->cmd_termcaps->head));
srcs/moves.c:		if (!all->cmd_termcaps->head || all_is_spaces(all->cmd_termcaps->head))
srcs/moves.c:	// if (all->current && !all->history_moves)
srcs/moves.c:	// 	all->history_moves = 1;
srcs/moves.c:	// 	realloc_termcaps_cmd(all, all->current);
srcs/moves.c:	// 	all->cursor_pos = (int)all->cmd_termcaps->lenght;
srcs/moves.c:	// 	all->stop = 1;
srcs/moves.c:	// printf("all->cmd: %s\n", all->cmd);
srcs/moves.c:	// printf("cursor pos: %d\n", all->cursor_pos);
srcs/moves.c:	if (K_LEFT && all->cmd_termcaps->lenght > 0 && all->cursor_pos > 1)
srcs/moves.c:		all->cursor_pos--;
srcs/moves.c:	if (K_RIGHT && all->cmd_termcaps->lenght > 0
srcs/moves.c:		&&  (size_t)all->cursor_pos < all->cmd_termcaps->lenght + 1)
srcs/moves.c:		all->cursor_pos++;
srcs/moves.c:	// all->stop = 0;
srcs/moves.c:	ct = all->cursor_pos;
srcs/moves.c:	while ((size_t)ct++ <= all->cmd_termcaps->lenght)
srcs/moves.c:	ft_putstr(all->cmd);
srcs/moves.c:	ct = (int)all->cmd_termcaps->lenght;
srcs/moves.c:	while (ct-- >= all->cursor_pos)
srcs/moves.c:	//printf("|%c|\n", all->cmd_termcaps->tail->c);
srcs/moves.c:		if (!all->cmd_termcaps->head)
srcs/moves.c:			//dlst_add_back_2(all->cmd_termcaps, dlst_cmd_new('\t', all->cmd_termcaps->lenght += 1));
srcs/moves.c:			all->stop = 0;
srcs/moves.c:		// if (all->cmd_termcaps->head)
srcs/moves.c:		// 	printf("head: |%c|\n", all->cmd_termcaps->head->c);
srcs/moves.c:		if (all->already_in_history)
srcs/moves.c:			realloc_termcaps_cmd(all, all->cmd);
srcs/moves.c:		// printf("%d\n", all->cursor_pos);
srcs/moves.c:		// printf("%zu\n", all->cmd_termcaps->lenght);
srcs/moves.c:	//	display_dlst2(all->cmd_termcaps);
srcs/moves.c:		if (all->cmd_termcaps->lenght > 0 && all->cursor_pos > 1)
srcs/moves.c:			//printf("cursor_pos: %d\n", all->cursor_pos);
srcs/moves.c:			//display_dlst2(all->cmd_termcaps);
srcs/moves.c:			// if (all->cmd_termcaps->tail->c == '\t')
srcs/moves.c:			// 	dlst_del_one2(all->cmd_termcaps, all->cmd_termcaps->tail->c);
srcs/moves.c:				if ((size_t)all->cursor_pos <= all->cmd_termcaps->lenght)
srcs/moves.c:					dlst_del_one2(all->cmd_termcaps, all->cursor_pos - 1);
srcs/moves.c:					dlst_del_one2(all->cmd_termcaps, all->cursor_pos - 1);
srcs/moves.c:				all->cursor_pos--;
srcs/parse_cmd.c:	while (all->parsecmd[i])
srcs/parse_cmd.c:		if (check_redirection(all->parsecmd[i]) == 1)
srcs/parse_cmd.c:			exec_redirection_cmd(all->parsecmd[i]);
srcs/parse_cmd.c:			exec_simple_cmd(all->parsecmd[i]);
srcs/parse_cmd.c:	all->parsecmd = NULL;
srcs/parse_cmd.c:		all->parsecmd = ft_strsplit(buff, ';');
srcs/parse_cmd.c:	if (all->parsecmd)
srcs/parse_cmd.c:		while (all->parsecmd[i])
srcs/parse_cmd.c:			all->parsecmd[i] = ft_epur_str(all->parsecmd[i]);
srcs/pipe.c:	while (all->path2exec[i])
srcs/pipe.c:		tmp = ft_strjoin(all->path2exec[i], "/");
srcs/pipe.c:	all->pipe = ft_strsplit(cmd, '|');
srcs/pipe.c:		while (all->pipe[i])
srcs/pipe.c:			all->pipe[i] = ft_epur_str(all->pipe[i]);
srcs/pipe.c:			args = ft_strsplit(all->pipe[i], ' ');
srcs/pipe.c:			if (check_redirect(all->pipe[i]))
srcs/pipe.c:			if (ft_tablen(&all->pipe[i]) > 1)
srcs/pipe.c:		if (execve(cmd, args, all->dupenv) == -1)
srcs/pipe.c:		if (execve(cmd, args, all->dupenv) == -1)
srcs/redirection.c:	dup2(all->fd2open, fd2dup);
srcs/redirection.c:	close(all->fd2open);
srcs/redirection.c:	if ((all->fd2open = open(redirect[1], O_WRONLY | O_CREAT | O_TRUNC, 0644)) == -1)
srcs/redirection.c:	if ((all->fd2open = open(redirect[1], O_WRONLY | O_CREAT | O_APPEND, 0644)) == -1)
srcs/redirection.c:	if ((all->fd2open = open(redirect[1], O_RDONLY)) == -1)
srcs/tools.c:	nav = all->env->head_node;
srcs/tools.c:	nav = all->env->head_node;
srcs/tools.c:				nav->s = ft_strjoin("OLDPWD=", all->oldpwd);
srcs/tools.c:	nav = all->cmd_termcaps->tail;
srcs/tools.c:		dlst_add_back_2(all->cmd_termcaps, dlst_cmd_new(s[ct]));
srcs/tools.c:	//printf("allnbchar: %d\n", all->nb_char_write);
srcs/tools.c:	// if (all->current)
srcs/tools.c:	// 	mprintf("current: %s\n", all->current);
srcs/tools.c:	if (!all->nb_char_write && all->current)
srcs/tools.c:		all->nb_char_write = ft_strlen(all->current) - 1;
srcs/tools.c:		dlst_add_back_2(all->cmd_termcaps, dlst_cmd_new(s[ct++]));	
